#!/usr/bin/env bash

source config;

ENV=$1;

if [ "${ENV}" != "local" ] && [ "${ENV}" != "staging" ] && [ "${ENV}" != "production" ]; then
  allow_commands db_restore local,staging,production;
fi

info_message Getting application database name...
DB_NAME=`bin/rails r "puts ActiveRecord::Base.connection.current_database"`;
DB_FILE="db/dumps/${DB_NAME}.sql";

if [ "${ENV}" != "local" ]; then
  if [ "${DEPLOYMENT_WITH}" = "heroku" ]; then
    info_message Downloading backups...
    heroku pg:backups:capture -r $ENV;
    execute curl -o $DB_FILE `heroku pg:backups public-url -r ${ENV}`
  else
    warning_message "Available only for heroku";
    exit;
    # REMOTE_USER=$REMOTE_USER_STATGING;
    # REMOTE_HOST=$REMOTE_HOST_STATGING;
    # REMOTE_DB_NAME=$REMOTE_DATABASE_STATGING;
    # REMOTE_DUMP_PATH=$REMOTE_DUMP_PATH_STATGING;
    # if [ "${ENV}" == "production" ]; then
    #   REMOTE_USER=$REMOTE_USER_PRODUCTION;
    #   REMOTE_HOST=$REMOTE_HOST_PRODUCTION;
    #   REMOTE_DB_NAME=$REMOTE_DATABASE_PRODUCTION;
    #   REMOTE_DUMP_PATH=$REMOTE_DUMP_PATH_PRODUCTION;
    # fi
    # REMOTE_DB_FILE="${REMOTE_DUMP_PATH}/${REMOTE_DB_NAME}.sql";
    # FULL_HOST="${REMOTE_USER}@${REMOTE_HOST}";

    # COMMAND_PG_DUMP="pg_dump -U ${REMOTE_USER} ${REMOTE_DB_NAME} > ${REMOTE_DB_FILE}";
    # execute ssh $FULL_HOST "\"${COMMAND_PG_DUMP}\"";

    # info_message Downloading $ENV dump...;
    # execute scp $FULL_HOST:$REMOTE_DB_FILE $DB_FILE;
  fi
fi

if [ ! -f $DB_FILE ]; then
  error_message "File not found '${DB_FILE}'";
  exit;
fi

info_message Reseting local database...;
execute bin/rails db:drop db:create;

info_message Restoring local database...;
execute pg_restore --verbose --clean --no-acl --no-owner -d $DB_NAME $DB_FILE;

info_message Running migrations...;
execute rails db:migrate;

success_message Database was successfully imported from ${ENV} the server.;
